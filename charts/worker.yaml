---
apiVersion: v1
kind: Service
metadata:
  name: worker
  labels:
    app: worker
spec:
  selector:
    app: worker
  ports:
    - port: 8080
      targetPort: 8080
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: worker
spec:
  serviceName: worker
  selector:
    matchLabels:
      app: worker
  replicas: {{ .Values.worker.deploymentSpec.replicas }}
  template:
    metadata:
      labels:
        app: worker
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      containers:
        - name: worker
          image: {{.Values.worker.image}}
          ports:
            - containerPort: 8080
              name: http
          resources:
            requests:
              cpu: "{{.Values.worker.deploymentSpec.resources.requests.cpu}}"
              memory: "{{.Values.worker.deploymentSpec.resources.requests.memory}}"
            limits:
              memory: "{{.Values.worker.deploymentSpec.resources.limits.memory}}"
          command: [
            "/eth/eth-archive-worker",
            "--server-addr", "0.0.0.0:8080",
            "--db-path", "/data/db",
            "--data-path", "/data/parquet/files",
            "--request-timeout-secs", "300",
            "--connect-timeout-ms", "1000",
            "--block-batch-size", "{{.Values.ingest.blockBatchSize}}",
            {{- if .Values.ingest.maxRpcEndpointBestBlockDiff}}
            "--max-rpc-endpoint-best-block-diff", "{{.Values.ingest.maxRpcEndpointBestBlockDiff}}",
            {{- end }}
            {{- if .Values.ingest.retryCount}}
            "--num-tries", "{{.Values.ingest.retryCount}}",
            {{- end }}
            {{- if .Values.ingest.waitBetweenRounds }}
            "--wait-between-rounds", "{{.Values.ingest.waitBetweenRounds}}",
            {{- end }}
            {{- if .Values.ingest.getReceipts }}
            "--get-receipts",
            {{- end }}
            "--http-req-concurrency", "{{.Values.ingest.httpReqConcurrency}}",
            "--best-block-offset", "{{.Values.ingest.bestBlockOffset}}",
            {{- range .Values.ingest.rpcEndpoints }}
            "--rpc-urls", "{{ . }}",
            {{- end }}
            "--initial-hot-block-range", "{{.Values.worker.initialHotBlockRange}}",
            "--max-resp-body-size", "{{.Values.worker.maxRespBodySize}}",
            "--resp-time-limit", "5000",
            "--s3-endpoint", "https://s3.filebase.com",
            "--s3-bucket-name", "{{.Values.bucket.name}}",
            "--s3-bucket-region", "us-east-1",
            "--s3-sync-interval-secs", "{{.Values.s3.syncIntervalSecs}}",
            "--s3-concurrency", "{{.Values.s3.syncConcurrency}}",
            {{- if .Values.worker.queryConcurrency }}
            "--query-concurrency", "{{.Values.worker.queryConcurrency}}",
            {{- end }}
             {{- if .Values.worker.maxParquetQueryConcurrency }}
            "--max-parquet-query-concurrency", "{{.Values.worker.maxParquetQueryConcurrency}}",
            {{- end }}
          ]
          env:
            - name: RUST_LOG
              value: {{.Values.worker.logLevel}}
            - name: AWS_ACCESS_KEY_ID
              value: {{.Values.bucket.accessKey}}
            - name: AWS_SECRET_ACCESS_KEY
              value: {{.Values.bucket.secretKey}}
            - name: RAYON_NUM_THREADS
              value: "16"
          volumeMounts:
            - mountPath: /data/parquet
              name: parquet
            - mountPath: /data/db
              name: db
          livenessProbe:
            httpGet:
              port: 8080
              path: /height
          readinessProbe:
            httpGet:
              port: 8080
              path: /height
      volumes:
        - name: db
          persistentVolumeClaim:
            claimName: worker-0-rocksdb
        - name: parquet
          persistentVolumeClaim:
            claimName: worker-0-parquet-data

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: worker-ingress
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/service-upstream: "true"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "180"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  rules:
    - host: {{.Values.worker.ingress.host}}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: worker
                port:
                  number: 8080
    {{ range $alias := .Values.worker.ingress.aliases }}
    - host: {{ $alias }}
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: worker
                port:
                  number: 8080
    {{ end }}